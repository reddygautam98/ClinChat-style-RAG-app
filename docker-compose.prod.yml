services:
  # Load Balancer with latest nginx
  nginx:
    image: nginx:1.25.3-alpine
    container_name: healthai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      healthai-app-1:
        condition: service_healthy
      healthai-app-2:
        condition: service_healthy
      healthai-app-3:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Application Instances with updated configuration
  healthai-app-1:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: healthai-app-1
    environment:
      - APP_INSTANCE=1
      - PORT=8000
      - PYTHONPATH=/app
      - WORKERS=2
    volumes:
      - ./data:/app/data:rw
      - ./backups:/app/backups:rw
      - ./logs:/app/logs:rw
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  healthai-app-2:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: healthai-app-2
    environment:
      - APP_INSTANCE=2
      - PORT=8000
      - PYTHONPATH=/app
      - WORKERS=2
    volumes:
      - ./data:/app/data:rw
      - ./backups:/app/backups:rw
      - ./logs:/app/logs:rw
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  healthai-app-3:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: healthai-app-3
    environment:
      - APP_INSTANCE=3
      - PORT=8000
      - PYTHONPATH=/app
      - WORKERS=2
    volumes:
      - ./data:/app/data:rw
      - ./backups:/app/backups:rw
      - ./logs:/app/logs:rw
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring with latest Prometheus
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: healthai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and session management
  redis:
    image: redis:7.2.4-alpine
    container_name: healthai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    restart: unless-stopped
    networks:
      - healthai-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

volumes:
  nginx_logs:
  prometheus_data:
  redis_data:

networks:
  healthai-network:
    driver: bridge