# Nginx configuration for HealthAI RAG Application
# Production-ready load balancer with health checks and monitoring

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # MIME Types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging Configuration
    log_format healthai_format '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'rt=$request_time uct="$upstream_connect_time" '
                              'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log healthai_format;
    error_log /var/log/nginx/error.log warn;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=health_limit:10m rate=60r/m;
    
    # Upstream Configuration for HealthAI Application
    upstream healthai_backend {
        least_conn;
        server healthai-app-1:8000 max_fails=3 fail_timeout=30s;
        server healthai-app-2:8000 max_fails=3 fail_timeout=30s;
        server healthai-app-3:8000 max_fails=3 fail_timeout=30s;
        
        # Health check configuration
        keepalive 32;
    }
    
    # HTTP to HTTPS Redirect
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint (allow HTTP for internal checks)
        location /nginx-health {
            access_log off;
            return 200 "Nginx OK";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Main HTTPS Server
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL Configuration (placeholder for production certificates)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Security Headers
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
        
        # Main Application Routes
        location / {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://healthai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Health check for load balancing
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        }
        
        # Health Check Endpoint
        location /health {
            limit_req zone=health_limit burst=20 nodelay;
            
            proxy_pass http://healthai_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Shorter timeouts for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            access_log off;
        }
        
        # API Routes with Enhanced Rate Limiting
        location /api/ {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://healthai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for AI processing
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # Disable buffering for streaming responses
            proxy_buffering off;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # Static Files (if any)
        location /static/ {
            alias /app/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Monitoring Endpoints
        location /metrics {
            proxy_pass http://healthai_backend/metrics;
            access_log off;
            allow 172.16.0.0/12;  # Docker networks
            allow 127.0.0.1;
            deny all;
        }
    }
    
    # Monitoring Server for Prometheus
    server {
        listen 8080;
        server_name _;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.16.0.0/12;  # Docker networks
            allow 127.0.0.1;
            deny all;
        }
    }
}